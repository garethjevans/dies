//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	coordinationv1 "k8s.io/api/coordination/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

type LeaseDie interface {
	// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
	DieStamp(fn func(r *coordinationv1.Lease)) LeaseDie
	// DieFeed returns a new die with the provided resource.
	DieFeed(r coordinationv1.Lease) LeaseDie
	// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
	DieFeedPtr(r *coordinationv1.Lease) LeaseDie
	// DieRelease returns the resource managed by the die.
	DieRelease() coordinationv1.Lease
	// DieReleasePtr returns a pointer to the resource managed by the die.
	DieReleasePtr() *coordinationv1.Lease
	// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
	DieImmutable(immutable bool) LeaseDie
	// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
	DeepCopy() LeaseDie

	// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
	MetadataDie(fn func(d metav1.ObjectMetaDie)) LeaseDie
	// SpecDie stamps the resource's spec field with a mutable die.
	SpecDie(fn func(d LeaseSpecDie)) LeaseDie
	// Specification of the Lease. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
	Spec(v coordinationv1.LeaseSpec) LeaseDie

	runtime.Object
	apismetav1.Object
	apismetav1.ObjectMetaAccessor
}

var _ LeaseDie = (*leaseDie)(nil)
var LeaseBlank = (&leaseDie{}).DieFeed(coordinationv1.Lease{})

type leaseDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       coordinationv1.Lease
}

func (d *leaseDie) DieImmutable(immutable bool) LeaseDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy().(*leaseDie)
	d.mutable = !immutable
	return d
}

func (d *leaseDie) DieFeed(r coordinationv1.Lease) LeaseDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &leaseDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *leaseDie) DieFeedPtr(r *coordinationv1.Lease) LeaseDie {
	if r == nil {
		r = &coordinationv1.Lease{}
	}
	return d.DieFeed(*r)
}

func (d *leaseDie) DieRelease() coordinationv1.Lease {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *leaseDie) DieReleasePtr() *coordinationv1.Lease {
	r := d.DieRelease()
	return &r
}

func (d *leaseDie) DieStamp(fn func(r *coordinationv1.Lease)) LeaseDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *leaseDie) DeepCopy() LeaseDie {
	r := *d.r.DeepCopy()
	return &leaseDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *leaseDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *leaseDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *leaseDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *leaseDie) UnmarshalJSON(b []byte) error {
	if d == LeaseBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &coordinationv1.Lease{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r).(*leaseDie)
	return err
}

func (d *leaseDie) MetadataDie(fn func(d metav1.ObjectMetaDie)) LeaseDie {
	return d.DieStamp(func(r *coordinationv1.Lease) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *leaseDie) SpecDie(fn func(d LeaseSpecDie)) LeaseDie {
	return d.DieStamp(func(r *coordinationv1.Lease) {
		d := LeaseSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *leaseDie) Spec(v coordinationv1.LeaseSpec) LeaseDie {
	return d.DieStamp(func(r *coordinationv1.Lease) {
		r.Spec = v
	})
}

type LeaseSpecDie interface {
	// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
	DieStamp(fn func(r *coordinationv1.LeaseSpec)) LeaseSpecDie
	// DieFeed returns a new die with the provided resource.
	DieFeed(r coordinationv1.LeaseSpec) LeaseSpecDie
	// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
	DieFeedPtr(r *coordinationv1.LeaseSpec) LeaseSpecDie
	// DieRelease returns the resource managed by the die.
	DieRelease() coordinationv1.LeaseSpec
	// DieReleasePtr returns a pointer to the resource managed by the die.
	DieReleasePtr() *coordinationv1.LeaseSpec
	// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
	DieImmutable(immutable bool) LeaseSpecDie
	// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
	DeepCopy() LeaseSpecDie

	// holderIdentity contains the identity of the holder of a current lease.
	HolderIdentity(v *string) LeaseSpecDie
	// leaseDurationSeconds is a duration that candidates for a lease need to wait to force acquire it. This is measure against time of last observed RenewTime.
	LeaseDurationSeconds(v *int32) LeaseSpecDie
	// acquireTime is a time when the current lease was acquired.
	AcquireTime(v *apismetav1.MicroTime) LeaseSpecDie
	// renewTime is a time when the current holder of a lease has last updated the lease.
	RenewTime(v *apismetav1.MicroTime) LeaseSpecDie
	// leaseTransitions is the number of transitions of a lease between holders.
	LeaseTransitions(v *int32) LeaseSpecDie
}

var _ LeaseSpecDie = (*leaseSpecDie)(nil)
var LeaseSpecBlank = (&leaseSpecDie{}).DieFeed(coordinationv1.LeaseSpec{})

type leaseSpecDie struct {
	mutable bool
	r       coordinationv1.LeaseSpec
}

func (d *leaseSpecDie) DieImmutable(immutable bool) LeaseSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy().(*leaseSpecDie)
	d.mutable = !immutable
	return d
}

func (d *leaseSpecDie) DieFeed(r coordinationv1.LeaseSpec) LeaseSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &leaseSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *leaseSpecDie) DieFeedPtr(r *coordinationv1.LeaseSpec) LeaseSpecDie {
	if r == nil {
		r = &coordinationv1.LeaseSpec{}
	}
	return d.DieFeed(*r)
}

func (d *leaseSpecDie) DieRelease() coordinationv1.LeaseSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *leaseSpecDie) DieReleasePtr() *coordinationv1.LeaseSpec {
	r := d.DieRelease()
	return &r
}

func (d *leaseSpecDie) DieStamp(fn func(r *coordinationv1.LeaseSpec)) LeaseSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *leaseSpecDie) DeepCopy() LeaseSpecDie {
	r := *d.r.DeepCopy()
	return &leaseSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *leaseSpecDie) HolderIdentity(v *string) LeaseSpecDie {
	return d.DieStamp(func(r *coordinationv1.LeaseSpec) {
		r.HolderIdentity = v
	})
}

func (d *leaseSpecDie) LeaseDurationSeconds(v *int32) LeaseSpecDie {
	return d.DieStamp(func(r *coordinationv1.LeaseSpec) {
		r.LeaseDurationSeconds = v
	})
}

func (d *leaseSpecDie) AcquireTime(v *apismetav1.MicroTime) LeaseSpecDie {
	return d.DieStamp(func(r *coordinationv1.LeaseSpec) {
		r.AcquireTime = v
	})
}

func (d *leaseSpecDie) RenewTime(v *apismetav1.MicroTime) LeaseSpecDie {
	return d.DieStamp(func(r *coordinationv1.LeaseSpec) {
		r.RenewTime = v
	})
}

func (d *leaseSpecDie) LeaseTransitions(v *int32) LeaseSpecDie {
	return d.DieStamp(func(r *coordinationv1.LeaseSpec) {
		r.LeaseTransitions = v
	})
}
