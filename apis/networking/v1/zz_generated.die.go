//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	fmtx "fmt"
	metav1 "github.com/scothis/dies/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	networkingv1 "k8s.io/api/networking/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

type IngressDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.Ingress
}

var IngressBlank = (&IngressDie{}).DieFeed(networkingv1.Ingress{})

func (d *IngressDie) DieImmutable(immutable bool) *IngressDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *IngressDie) DieFeed(r networkingv1.Ingress) *IngressDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &IngressDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *IngressDie) DieRelease() networkingv1.Ingress {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *IngressDie) DieStamp(fn func(r *networkingv1.Ingress)) *IngressDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *IngressDie) DeepCopy() *IngressDie {
	r := *d.r.DeepCopy()
	return &IngressDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *IngressDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *IngressDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *IngressDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *IngressDie) UnmarshalJSON(b []byte) error {
	if d == IngressBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &networkingv1.Ingress{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *IngressDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *IngressDie) SpecDie(fn func(d *IngressSpecDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := IngressSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *IngressDie) StatusDie(fn func(d *IngressStatusDie)) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		d := IngressStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*IngressDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*IngressDie)(nil)
var _ runtime.Object = (*IngressDie)(nil)

// Spec is the desired state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressDie) Spec(v networkingv1.IngressSpec) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.Spec = v
	})
}

// Status is the current state of the Ingress. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressDie) Status(v networkingv1.IngressStatus) *IngressDie {
	return d.DieStamp(func(r *networkingv1.Ingress) {
		r.Status = v
	})
}

type IngressSpecDie struct {
	mutable bool
	r       networkingv1.IngressSpec
}

var IngressSpecBlank = (&IngressSpecDie{}).DieFeed(networkingv1.IngressSpec{})

func (d *IngressSpecDie) DieImmutable(immutable bool) *IngressSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *IngressSpecDie) DieFeed(r networkingv1.IngressSpec) *IngressSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *IngressSpecDie) DieRelease() networkingv1.IngressSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *IngressSpecDie) DieStamp(fn func(r *networkingv1.IngressSpec)) *IngressSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *IngressSpecDie) DeepCopy() *IngressSpecDie {
	r := *d.r.DeepCopy()
	return &IngressSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// IngressClassName is the name of the IngressClass cluster resource. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.
func (d *IngressSpecDie) IngressClassName(v *string) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.IngressClassName = v
	})
}

// DefaultBackend is the backend that should handle requests that don't match any rule. If Rules are not specified, DefaultBackend must be specified. If DefaultBackend is not set, the handling of requests that do not match any of the rules will be up to the Ingress controller.
func (d *IngressSpecDie) DefaultBackend(v *networkingv1.IngressBackend) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.DefaultBackend = v
	})
}

// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
func (d *IngressSpecDie) TLS(v ...networkingv1.IngressTLS) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.TLS = v
	})
}

// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
func (d *IngressSpecDie) Rules(v ...networkingv1.IngressRule) *IngressSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressSpec) {
		r.Rules = v
	})
}

type IngressStatusDie struct {
	mutable bool
	r       networkingv1.IngressStatus
}

var IngressStatusBlank = (&IngressStatusDie{}).DieFeed(networkingv1.IngressStatus{})

func (d *IngressStatusDie) DieImmutable(immutable bool) *IngressStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *IngressStatusDie) DieFeed(r networkingv1.IngressStatus) *IngressStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *IngressStatusDie) DieRelease() networkingv1.IngressStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *IngressStatusDie) DieStamp(fn func(r *networkingv1.IngressStatus)) *IngressStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *IngressStatusDie) DeepCopy() *IngressStatusDie {
	r := *d.r.DeepCopy()
	return &IngressStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// LoadBalancer contains the current status of the load-balancer.
func (d *IngressStatusDie) LoadBalancer(v corev1.LoadBalancerStatus) *IngressStatusDie {
	return d.DieStamp(func(r *networkingv1.IngressStatus) {
		r.LoadBalancer = v
	})
}

type IngressClassDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.IngressClass
}

var IngressClassBlank = (&IngressClassDie{}).DieFeed(networkingv1.IngressClass{})

func (d *IngressClassDie) DieImmutable(immutable bool) *IngressClassDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *IngressClassDie) DieFeed(r networkingv1.IngressClass) *IngressClassDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &IngressClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *IngressClassDie) DieRelease() networkingv1.IngressClass {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *IngressClassDie) DieStamp(fn func(r *networkingv1.IngressClass)) *IngressClassDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *IngressClassDie) DeepCopy() *IngressClassDie {
	r := *d.r.DeepCopy()
	return &IngressClassDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *IngressClassDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *IngressClassDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *IngressClassDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *IngressClassDie) UnmarshalJSON(b []byte) error {
	if d == IngressClassBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &networkingv1.IngressClass{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *IngressClassDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *IngressClassDie) SpecDie(fn func(d *IngressClassSpecDie)) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		d := IngressClassSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

var _ apismetav1.Object = (*IngressClassDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*IngressClassDie)(nil)
var _ runtime.Object = (*IngressClassDie)(nil)

// Spec is the desired state of the IngressClass. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
func (d *IngressClassDie) Spec(v networkingv1.IngressClassSpec) *IngressClassDie {
	return d.DieStamp(func(r *networkingv1.IngressClass) {
		r.Spec = v
	})
}

type IngressClassSpecDie struct {
	mutable bool
	r       networkingv1.IngressClassSpec
}

var IngressClassSpecBlank = (&IngressClassSpecDie{}).DieFeed(networkingv1.IngressClassSpec{})

func (d *IngressClassSpecDie) DieImmutable(immutable bool) *IngressClassSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *IngressClassSpecDie) DieFeed(r networkingv1.IngressClassSpec) *IngressClassSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &IngressClassSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *IngressClassSpecDie) DieRelease() networkingv1.IngressClassSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *IngressClassSpecDie) DieStamp(fn func(r *networkingv1.IngressClassSpec)) *IngressClassSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *IngressClassSpecDie) DeepCopy() *IngressClassSpecDie {
	r := *d.r.DeepCopy()
	return &IngressClassSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Controller refers to the name of the controller that should handle this class. This allows for different "flavors" that are controlled by the same controller. For example, you may have different Parameters for the same implementing controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. "acme.io/ingress-controller". This field is immutable.
func (d *IngressClassSpecDie) Controller(v string) *IngressClassSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressClassSpec) {
		r.Controller = v
	})
}

// Parameters is a link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters.
func (d *IngressClassSpecDie) Parameters(v *networkingv1.IngressClassParametersReference) *IngressClassSpecDie {
	return d.DieStamp(func(r *networkingv1.IngressClassSpec) {
		r.Parameters = v
	})
}

type NetworkPolicyDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       networkingv1.NetworkPolicy
}

var NetworkPolicyBlank = (&NetworkPolicyDie{}).DieFeed(networkingv1.NetworkPolicy{})

func (d *NetworkPolicyDie) DieImmutable(immutable bool) *NetworkPolicyDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NetworkPolicyDie) DieFeed(r networkingv1.NetworkPolicy) *NetworkPolicyDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NetworkPolicyDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NetworkPolicyDie) DieRelease() networkingv1.NetworkPolicy {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NetworkPolicyDie) DieStamp(fn func(r *networkingv1.NetworkPolicy)) *NetworkPolicyDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NetworkPolicyDie) DeepCopy() *NetworkPolicyDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicyDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NetworkPolicyDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *NetworkPolicyDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NetworkPolicyDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NetworkPolicyDie) UnmarshalJSON(b []byte) error {
	if d == NetworkPolicyBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &networkingv1.NetworkPolicy{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *NetworkPolicyDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *NetworkPolicyDie) SpecDie(fn func(d *NetworkPolicySpecDie)) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		d := NetworkPolicySpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

var _ apismetav1.Object = (*NetworkPolicyDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*NetworkPolicyDie)(nil)
var _ runtime.Object = (*NetworkPolicyDie)(nil)

// Specification of the desired behavior for this NetworkPolicy.
func (d *NetworkPolicyDie) Spec(v networkingv1.NetworkPolicySpec) *NetworkPolicyDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicy) {
		r.Spec = v
	})
}

type NetworkPolicySpecDie struct {
	mutable bool
	r       networkingv1.NetworkPolicySpec
}

var NetworkPolicySpecBlank = (&NetworkPolicySpecDie{}).DieFeed(networkingv1.NetworkPolicySpec{})

func (d *NetworkPolicySpecDie) DieImmutable(immutable bool) *NetworkPolicySpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NetworkPolicySpecDie) DieFeed(r networkingv1.NetworkPolicySpec) *NetworkPolicySpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NetworkPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NetworkPolicySpecDie) DieRelease() networkingv1.NetworkPolicySpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NetworkPolicySpecDie) DieStamp(fn func(r *networkingv1.NetworkPolicySpec)) *NetworkPolicySpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NetworkPolicySpecDie) DeepCopy() *NetworkPolicySpecDie {
	r := *d.r.DeepCopy()
	return &NetworkPolicySpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// Selects the pods to which this NetworkPolicy object applies. The array of ingress rules is applied to any pods selected by this field. Multiple network policies can select the same set of pods. In this case, the ingress rules for each are combined additively. This field is NOT optional and follows standard label selector semantics. An empty podSelector matches all pods in this namespace.
func (d *NetworkPolicySpecDie) PodSelector(v apismetav1.LabelSelector) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.PodSelector = v
	})
}

// List of ingress rules to be applied to the selected pods. Traffic is allowed to a pod if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the pods it selects are isolated by default)
func (d *NetworkPolicySpecDie) Ingress(v ...networkingv1.NetworkPolicyIngressRule) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.Ingress = v
	})
}

// List of egress rules to be applied to the selected pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose podSelector matches the pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the pods it selects are isolated by default). This field is beta-level in 1.8
func (d *NetworkPolicySpecDie) Egress(v ...networkingv1.NetworkPolicyEgressRule) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.Egress = v
	})
}

// List of rule types that the NetworkPolicy relates to. Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"]. If this field is not specified, it will default based on the existence of Ingress or Egress rules; policies that contain an Egress section are assumed to affect Egress, and all policies (whether or not they contain an Ingress section) are assumed to affect Ingress. If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ]. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a policyTypes value that include "Egress" (since such a policy would not include an Egress section and would otherwise default to just [ "Ingress" ]). This field is beta-level in 1.8
func (d *NetworkPolicySpecDie) PolicyTypes(v ...networkingv1.PolicyType) *NetworkPolicySpecDie {
	return d.DieStamp(func(r *networkingv1.NetworkPolicySpec) {
		r.PolicyTypes = v
	})
}
