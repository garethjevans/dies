//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	fmtx "fmt"
	metav1 "github.com/scothis/dies/apis/meta/v1"
	corev1 "k8s.io/api/core/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

var (
	GroupVersion  = schema.GroupVersion{Group: "", Version: "v1"}
	SchemeBuilder = runtime.NewSchemeBuilder()
	AddToScheme   = SchemeBuilder.AddToScheme
)

type ConfigMapDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ConfigMap
}

var ConfigMapBlank = (&ConfigMapDie{}).DieFeed(corev1.ConfigMap{})

func (d *ConfigMapDie) DieImmutable(immutable bool) *ConfigMapDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ConfigMapDie) DieFeed(r corev1.ConfigMap) *ConfigMapDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ConfigMapDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ConfigMapDie) DieRelease() corev1.ConfigMap {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ConfigMapDie) DieStamp(fn func(r *corev1.ConfigMap)) *ConfigMapDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ConfigMapDie) DeepCopy() *ConfigMapDie {
	r := *d.r.DeepCopy()
	return &ConfigMapDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ConfigMapDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *ConfigMapDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ConfigMapDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ConfigMapDie) UnmarshalJSON(b []byte) error {
	if d == ConfigMapBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.ConfigMap{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *ConfigMapDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

var _ apismetav1.Object = (*ConfigMapDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*ConfigMapDie)(nil)
var _ runtime.Object = (*ConfigMapDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("ConfigMap"), &ConfigMapDie{})
		return nil
	})
}

func (d *ConfigMapDie) Data(v map[string]string) *ConfigMapDie {
	return d.DieStamp(func(r *corev1.ConfigMap) {
		r.Data = v
	})
}

type ContainerDie struct {
	mutable bool
	r       corev1.Container
}

var ContainerBlank = (&ContainerDie{}).DieFeed(corev1.Container{})

func (d *ContainerDie) DieImmutable(immutable bool) *ContainerDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ContainerDie) DieFeed(r corev1.Container) *ContainerDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ContainerDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ContainerDie) DieRelease() corev1.Container {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ContainerDie) DieStamp(fn func(r *corev1.Container)) *ContainerDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ContainerDie) DeepCopy() *ContainerDie {
	r := *d.r.DeepCopy()
	return &ContainerDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ContainerDie) Name(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Name = v
	})
}

func (d *ContainerDie) Image(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Image = v
	})
}

func (d *ContainerDie) Command(v ...string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Command = v
	})
}

func (d *ContainerDie) Args(v ...string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Args = v
	})
}

func (d *ContainerDie) WorkingDir(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.WorkingDir = v
	})
}

func (d *ContainerDie) Ports(v ...corev1.ContainerPort) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Ports = v
	})
}

func (d *ContainerDie) EnvFrom(v ...corev1.EnvFromSource) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.EnvFrom = v
	})
}

func (d *ContainerDie) Env(v ...corev1.EnvVar) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Env = v
	})
}

func (d *ContainerDie) Resources(v corev1.ResourceRequirements) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Resources = v
	})
}

func (d *ContainerDie) VolumeMounts(v ...corev1.VolumeMount) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.VolumeMounts = v
	})
}

func (d *ContainerDie) VolumeDevices(v ...corev1.VolumeDevice) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.VolumeDevices = v
	})
}

func (d *ContainerDie) LivenessProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.LivenessProbe = v
	})
}

func (d *ContainerDie) ReadinessProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.ReadinessProbe = v
	})
}

func (d *ContainerDie) StartupProbe(v *corev1.Probe) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.StartupProbe = v
	})
}

func (d *ContainerDie) Lifecycle(v *corev1.Lifecycle) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Lifecycle = v
	})
}

func (d *ContainerDie) TerminationMessagePath(v string) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TerminationMessagePath = v
	})
}

func (d *ContainerDie) TerminationMessagePolicy(v corev1.TerminationMessagePolicy) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TerminationMessagePolicy = v
	})
}

func (d *ContainerDie) ImagePullPolicy(v corev1.PullPolicy) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.ImagePullPolicy = v
	})
}

func (d *ContainerDie) SecurityContext(v *corev1.SecurityContext) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.SecurityContext = v
	})
}

func (d *ContainerDie) Stdin(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.Stdin = v
	})
}

func (d *ContainerDie) StdinOnce(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.StdinOnce = v
	})
}

func (d *ContainerDie) TTY(v bool) *ContainerDie {
	return d.DieStamp(func(r *corev1.Container) {
		r.TTY = v
	})
}

type EndpointsDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Endpoints
}

var EndpointsBlank = (&EndpointsDie{}).DieFeed(corev1.Endpoints{})

func (d *EndpointsDie) DieImmutable(immutable bool) *EndpointsDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *EndpointsDie) DieFeed(r corev1.Endpoints) *EndpointsDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &EndpointsDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *EndpointsDie) DieRelease() corev1.Endpoints {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *EndpointsDie) DieStamp(fn func(r *corev1.Endpoints)) *EndpointsDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *EndpointsDie) DeepCopy() *EndpointsDie {
	r := *d.r.DeepCopy()
	return &EndpointsDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *EndpointsDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *EndpointsDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *EndpointsDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *EndpointsDie) UnmarshalJSON(b []byte) error {
	if d == EndpointsBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Endpoints{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *EndpointsDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

var _ apismetav1.Object = (*EndpointsDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*EndpointsDie)(nil)
var _ runtime.Object = (*EndpointsDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Endpoints"), &EndpointsDie{})
		return nil
	})
}

func (d *EndpointsDie) Subsets(v ...corev1.EndpointSubset) *EndpointsDie {
	return d.DieStamp(func(r *corev1.Endpoints) {
		r.Subsets = v
	})
}

type EventDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Event
}

var EventBlank = (&EventDie{}).DieFeed(corev1.Event{})

func (d *EventDie) DieImmutable(immutable bool) *EventDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *EventDie) DieFeed(r corev1.Event) *EventDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &EventDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *EventDie) DieRelease() corev1.Event {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *EventDie) DieStamp(fn func(r *corev1.Event)) *EventDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *EventDie) DeepCopy() *EventDie {
	r := *d.r.DeepCopy()
	return &EventDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *EventDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *EventDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *EventDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *EventDie) UnmarshalJSON(b []byte) error {
	if d == EventBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Event{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *EventDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

var _ apismetav1.Object = (*EventDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*EventDie)(nil)
var _ runtime.Object = (*EventDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Event"), &EventDie{})
		return nil
	})
}

func (d *EventDie) InvolvedObject(v corev1.ObjectReference) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.InvolvedObject = v
	})
}

func (d *EventDie) Reason(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Reason = v
	})
}

func (d *EventDie) Message(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Message = v
	})
}

func (d *EventDie) Source(v corev1.EventSource) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Source = v
	})
}

func (d *EventDie) FirstTimestamp(v apismetav1.Time) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.FirstTimestamp = v
	})
}

func (d *EventDie) LastTimestamp(v apismetav1.Time) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.LastTimestamp = v
	})
}

func (d *EventDie) Count(v int32) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Count = v
	})
}

func (d *EventDie) Type(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Type = v
	})
}

func (d *EventDie) EventTime(v apismetav1.MicroTime) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.EventTime = v
	})
}

func (d *EventDie) Series(v *corev1.EventSeries) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Series = v
	})
}

func (d *EventDie) Action(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Action = v
	})
}

func (d *EventDie) Related(v *corev1.ObjectReference) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.Related = v
	})
}

func (d *EventDie) ReportingController(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.ReportingController = v
	})
}

func (d *EventDie) ReportingInstance(v string) *EventDie {
	return d.DieStamp(func(r *corev1.Event) {
		r.ReportingInstance = v
	})
}

type LimitRangeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.LimitRange
}

var LimitRangeBlank = (&LimitRangeDie{}).DieFeed(corev1.LimitRange{})

func (d *LimitRangeDie) DieImmutable(immutable bool) *LimitRangeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *LimitRangeDie) DieFeed(r corev1.LimitRange) *LimitRangeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &LimitRangeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *LimitRangeDie) DieRelease() corev1.LimitRange {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *LimitRangeDie) DieStamp(fn func(r *corev1.LimitRange)) *LimitRangeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *LimitRangeDie) DeepCopy() *LimitRangeDie {
	r := *d.r.DeepCopy()
	return &LimitRangeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *LimitRangeDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *LimitRangeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *LimitRangeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *LimitRangeDie) UnmarshalJSON(b []byte) error {
	if d == LimitRangeBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.LimitRange{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *LimitRangeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *LimitRangeDie) SpecDie(fn func(d *LimitRangeSpecDie)) *LimitRangeDie {
	return d.DieStamp(func(r *corev1.LimitRange) {
		d := LimitRangeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

var _ apismetav1.Object = (*LimitRangeDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*LimitRangeDie)(nil)
var _ runtime.Object = (*LimitRangeDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("LimitRange"), &LimitRangeDie{})
		return nil
	})
}

type LimitRangeSpecDie struct {
	mutable bool
	r       corev1.LimitRangeSpec
}

var LimitRangeSpecBlank = (&LimitRangeSpecDie{}).DieFeed(corev1.LimitRangeSpec{})

func (d *LimitRangeSpecDie) DieImmutable(immutable bool) *LimitRangeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *LimitRangeSpecDie) DieFeed(r corev1.LimitRangeSpec) *LimitRangeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &LimitRangeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *LimitRangeSpecDie) DieRelease() corev1.LimitRangeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *LimitRangeSpecDie) DieStamp(fn func(r *corev1.LimitRangeSpec)) *LimitRangeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *LimitRangeSpecDie) DeepCopy() *LimitRangeSpecDie {
	r := *d.r.DeepCopy()
	return &LimitRangeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *LimitRangeSpecDie) Limits(v ...corev1.LimitRangeItem) *LimitRangeSpecDie {
	return d.DieStamp(func(r *corev1.LimitRangeSpec) {
		r.Limits = v
	})
}

type NamespaceDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Namespace
}

var NamespaceBlank = (&NamespaceDie{}).DieFeed(corev1.Namespace{})

func (d *NamespaceDie) DieImmutable(immutable bool) *NamespaceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NamespaceDie) DieFeed(r corev1.Namespace) *NamespaceDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NamespaceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NamespaceDie) DieRelease() corev1.Namespace {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NamespaceDie) DieStamp(fn func(r *corev1.Namespace)) *NamespaceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NamespaceDie) DeepCopy() *NamespaceDie {
	r := *d.r.DeepCopy()
	return &NamespaceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NamespaceDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *NamespaceDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NamespaceDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NamespaceDie) UnmarshalJSON(b []byte) error {
	if d == NamespaceBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Namespace{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *NamespaceDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *NamespaceDie) SpecDie(fn func(d *NamespaceSpecDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := NamespaceSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *NamespaceDie) StatusDie(fn func(d *NamespaceStatusDie)) *NamespaceDie {
	return d.DieStamp(func(r *corev1.Namespace) {
		d := NamespaceStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*NamespaceDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*NamespaceDie)(nil)
var _ runtime.Object = (*NamespaceDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Namespace"), &NamespaceDie{})
		return nil
	})
}

type NamespaceSpecDie struct {
	mutable bool
	r       corev1.NamespaceSpec
}

var NamespaceSpecBlank = (&NamespaceSpecDie{}).DieFeed(corev1.NamespaceSpec{})

func (d *NamespaceSpecDie) DieImmutable(immutable bool) *NamespaceSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NamespaceSpecDie) DieFeed(r corev1.NamespaceSpec) *NamespaceSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NamespaceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NamespaceSpecDie) DieRelease() corev1.NamespaceSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NamespaceSpecDie) DieStamp(fn func(r *corev1.NamespaceSpec)) *NamespaceSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NamespaceSpecDie) DeepCopy() *NamespaceSpecDie {
	r := *d.r.DeepCopy()
	return &NamespaceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NamespaceSpecDie) Finalizers(v ...corev1.FinalizerName) *NamespaceSpecDie {
	return d.DieStamp(func(r *corev1.NamespaceSpec) {
		r.Finalizers = v
	})
}

type NamespaceStatusDie struct {
	mutable bool
	r       corev1.NamespaceStatus
}

var NamespaceStatusBlank = (&NamespaceStatusDie{}).DieFeed(corev1.NamespaceStatus{})

func (d *NamespaceStatusDie) DieImmutable(immutable bool) *NamespaceStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NamespaceStatusDie) DieFeed(r corev1.NamespaceStatus) *NamespaceStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NamespaceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NamespaceStatusDie) DieRelease() corev1.NamespaceStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NamespaceStatusDie) DieStamp(fn func(r *corev1.NamespaceStatus)) *NamespaceStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NamespaceStatusDie) DeepCopy() *NamespaceStatusDie {
	r := *d.r.DeepCopy()
	return &NamespaceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NamespaceStatusDie) Phase(v corev1.NamespacePhase) *NamespaceStatusDie {
	return d.DieStamp(func(r *corev1.NamespaceStatus) {
		r.Phase = v
	})
}

func (d *NamespaceStatusDie) Conditions(v ...corev1.NamespaceCondition) *NamespaceStatusDie {
	return d.DieStamp(func(r *corev1.NamespaceStatus) {
		r.Conditions = v
	})
}

type NodeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Node
}

var NodeBlank = (&NodeDie{}).DieFeed(corev1.Node{})

func (d *NodeDie) DieImmutable(immutable bool) *NodeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NodeDie) DieFeed(r corev1.Node) *NodeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &NodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NodeDie) DieRelease() corev1.Node {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NodeDie) DieStamp(fn func(r *corev1.Node)) *NodeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NodeDie) DeepCopy() *NodeDie {
	r := *d.r.DeepCopy()
	return &NodeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *NodeDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *NodeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *NodeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *NodeDie) UnmarshalJSON(b []byte) error {
	if d == NodeBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Node{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *NodeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *NodeDie) SpecDie(fn func(d *NodeSpecDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := NodeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *NodeDie) StatusDie(fn func(d *NodeStatusDie)) *NodeDie {
	return d.DieStamp(func(r *corev1.Node) {
		d := NodeStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*NodeDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*NodeDie)(nil)
var _ runtime.Object = (*NodeDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Node"), &NodeDie{})
		return nil
	})
}

type NodeSpecDie struct {
	mutable bool
	r       corev1.NodeSpec
}

var NodeSpecBlank = (&NodeSpecDie{}).DieFeed(corev1.NodeSpec{})

func (d *NodeSpecDie) DieImmutable(immutable bool) *NodeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NodeSpecDie) DieFeed(r corev1.NodeSpec) *NodeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NodeSpecDie) DieRelease() corev1.NodeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NodeSpecDie) DieStamp(fn func(r *corev1.NodeSpec)) *NodeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NodeSpecDie) DeepCopy() *NodeSpecDie {
	r := *d.r.DeepCopy()
	return &NodeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NodeSpecDie) PodCIDR(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.PodCIDR = v
	})
}

func (d *NodeSpecDie) PodCIDRs(v ...string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.PodCIDRs = v
	})
}

func (d *NodeSpecDie) ProviderID(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.ProviderID = v
	})
}

func (d *NodeSpecDie) Unschedulable(v bool) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.Unschedulable = v
	})
}

func (d *NodeSpecDie) Taints(v ...corev1.Taint) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.Taints = v
	})
}

func (d *NodeSpecDie) ConfigSource(v *corev1.NodeConfigSource) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.ConfigSource = v
	})
}

func (d *NodeSpecDie) DoNotUseExternalID(v string) *NodeSpecDie {
	return d.DieStamp(func(r *corev1.NodeSpec) {
		r.DoNotUseExternalID = v
	})
}

type NodeStatusDie struct {
	mutable bool
	r       corev1.NodeStatus
}

var NodeStatusBlank = (&NodeStatusDie{}).DieFeed(corev1.NodeStatus{})

func (d *NodeStatusDie) DieImmutable(immutable bool) *NodeStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *NodeStatusDie) DieFeed(r corev1.NodeStatus) *NodeStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &NodeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NodeStatusDie) DieRelease() corev1.NodeStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *NodeStatusDie) DieStamp(fn func(r *corev1.NodeStatus)) *NodeStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *NodeStatusDie) DeepCopy() *NodeStatusDie {
	r := *d.r.DeepCopy()
	return &NodeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *NodeStatusDie) Capacity(v corev1.ResourceList) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Capacity = v
	})
}

func (d *NodeStatusDie) Allocatable(v corev1.ResourceList) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Allocatable = v
	})
}

func (d *NodeStatusDie) Phase(v corev1.NodePhase) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Phase = v
	})
}

func (d *NodeStatusDie) Conditions(v ...corev1.NodeCondition) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Conditions = v
	})
}

func (d *NodeStatusDie) Addresses(v ...corev1.NodeAddress) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Addresses = v
	})
}

func (d *NodeStatusDie) DaemonEndpoints(v corev1.NodeDaemonEndpoints) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.DaemonEndpoints = v
	})
}

func (d *NodeStatusDie) NodeInfo(v corev1.NodeSystemInfo) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.NodeInfo = v
	})
}

func (d *NodeStatusDie) Images(v ...corev1.ContainerImage) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Images = v
	})
}

func (d *NodeStatusDie) VolumesInUse(v ...corev1.UniqueVolumeName) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.VolumesInUse = v
	})
}

func (d *NodeStatusDie) VolumesAttached(v ...corev1.AttachedVolume) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.VolumesAttached = v
	})
}

func (d *NodeStatusDie) Config(v *corev1.NodeConfigStatus) *NodeStatusDie {
	return d.DieStamp(func(r *corev1.NodeStatus) {
		r.Config = v
	})
}

type PersistentVolumeDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.PersistentVolume
}

var PersistentVolumeBlank = (&PersistentVolumeDie{}).DieFeed(corev1.PersistentVolume{})

func (d *PersistentVolumeDie) DieImmutable(immutable bool) *PersistentVolumeDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeDie) DieFeed(r corev1.PersistentVolume) *PersistentVolumeDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PersistentVolumeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PersistentVolumeDie) DieRelease() corev1.PersistentVolume {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeDie) DieStamp(fn func(r *corev1.PersistentVolume)) *PersistentVolumeDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeDie) DeepCopy() *PersistentVolumeDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PersistentVolumeDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *PersistentVolumeDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PersistentVolumeDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PersistentVolumeDie) UnmarshalJSON(b []byte) error {
	if d == PersistentVolumeBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.PersistentVolume{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *PersistentVolumeDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *PersistentVolumeDie) SpecDie(fn func(d *PersistentVolumeSpecDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := PersistentVolumeSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *PersistentVolumeDie) StatusDie(fn func(d *PersistentVolumeStatusDie)) *PersistentVolumeDie {
	return d.DieStamp(func(r *corev1.PersistentVolume) {
		d := PersistentVolumeStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*PersistentVolumeDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*PersistentVolumeDie)(nil)
var _ runtime.Object = (*PersistentVolumeDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("PersistentVolume"), &PersistentVolumeDie{})
		return nil
	})
}

type PersistentVolumeSpecDie struct {
	mutable bool
	r       corev1.PersistentVolumeSpec
}

var PersistentVolumeSpecBlank = (&PersistentVolumeSpecDie{}).DieFeed(corev1.PersistentVolumeSpec{})

func (d *PersistentVolumeSpecDie) DieImmutable(immutable bool) *PersistentVolumeSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeSpecDie) DieFeed(r corev1.PersistentVolumeSpec) *PersistentVolumeSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeSpecDie) DieRelease() corev1.PersistentVolumeSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeSpecDie) DieStamp(fn func(r *corev1.PersistentVolumeSpec)) *PersistentVolumeSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeSpecDie) DeepCopy() *PersistentVolumeSpecDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeSpecDie) Capacity(v corev1.ResourceList) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.Capacity = v
	})
}

func (d *PersistentVolumeSpecDie) PersistentVolumeSource(v corev1.PersistentVolumeSource) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.PersistentVolumeSource = v
	})
}

func (d *PersistentVolumeSpecDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.AccessModes = v
	})
}

func (d *PersistentVolumeSpecDie) ClaimRef(v *corev1.ObjectReference) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.ClaimRef = v
	})
}

func (d *PersistentVolumeSpecDie) PersistentVolumeReclaimPolicy(v corev1.PersistentVolumeReclaimPolicy) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.PersistentVolumeReclaimPolicy = v
	})
}

func (d *PersistentVolumeSpecDie) StorageClassName(v string) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.StorageClassName = v
	})
}

func (d *PersistentVolumeSpecDie) MountOptions(v ...string) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.MountOptions = v
	})
}

func (d *PersistentVolumeSpecDie) VolumeMode(v *corev1.PersistentVolumeMode) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.VolumeMode = v
	})
}

func (d *PersistentVolumeSpecDie) NodeAffinity(v *corev1.VolumeNodeAffinity) *PersistentVolumeSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeSpec) {
		r.NodeAffinity = v
	})
}

type PersistentVolumeStatusDie struct {
	mutable bool
	r       corev1.PersistentVolumeStatus
}

var PersistentVolumeStatusBlank = (&PersistentVolumeStatusDie{}).DieFeed(corev1.PersistentVolumeStatus{})

func (d *PersistentVolumeStatusDie) DieImmutable(immutable bool) *PersistentVolumeStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeStatusDie) DieFeed(r corev1.PersistentVolumeStatus) *PersistentVolumeStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeStatusDie) DieRelease() corev1.PersistentVolumeStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeStatusDie) DieStamp(fn func(r *corev1.PersistentVolumeStatus)) *PersistentVolumeStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeStatusDie) DeepCopy() *PersistentVolumeStatusDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeStatusDie) Phase(v corev1.PersistentVolumePhase) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Phase = v
	})
}

func (d *PersistentVolumeStatusDie) Message(v string) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Message = v
	})
}

func (d *PersistentVolumeStatusDie) Reason(v string) *PersistentVolumeStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeStatus) {
		r.Reason = v
	})
}

type PersistentVolumeClaimDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.PersistentVolumeClaim
}

var PersistentVolumeClaimBlank = (&PersistentVolumeClaimDie{}).DieFeed(corev1.PersistentVolumeClaim{})

func (d *PersistentVolumeClaimDie) DieImmutable(immutable bool) *PersistentVolumeClaimDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeClaimDie) DieFeed(r corev1.PersistentVolumeClaim) *PersistentVolumeClaimDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PersistentVolumeClaimDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PersistentVolumeClaimDie) DieRelease() corev1.PersistentVolumeClaim {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeClaimDie) DieStamp(fn func(r *corev1.PersistentVolumeClaim)) *PersistentVolumeClaimDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeClaimDie) DeepCopy() *PersistentVolumeClaimDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PersistentVolumeClaimDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *PersistentVolumeClaimDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PersistentVolumeClaimDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PersistentVolumeClaimDie) UnmarshalJSON(b []byte) error {
	if d == PersistentVolumeClaimBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.PersistentVolumeClaim{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *PersistentVolumeClaimDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *PersistentVolumeClaimDie) SpecDie(fn func(d *PersistentVolumeClaimSpecDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := PersistentVolumeClaimSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *PersistentVolumeClaimDie) StatusDie(fn func(d *PersistentVolumeClaimStatusDie)) *PersistentVolumeClaimDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaim) {
		d := PersistentVolumeClaimStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*PersistentVolumeClaimDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*PersistentVolumeClaimDie)(nil)
var _ runtime.Object = (*PersistentVolumeClaimDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("PersistentVolumeClaim"), &PersistentVolumeClaimDie{})
		return nil
	})
}

type PersistentVolumeClaimSpecDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimSpec
}

var PersistentVolumeClaimSpecBlank = (&PersistentVolumeClaimSpecDie{}).DieFeed(corev1.PersistentVolumeClaimSpec{})

func (d *PersistentVolumeClaimSpecDie) DieImmutable(immutable bool) *PersistentVolumeClaimSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeClaimSpecDie) DieFeed(r corev1.PersistentVolumeClaimSpec) *PersistentVolumeClaimSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeClaimSpecDie) DieRelease() corev1.PersistentVolumeClaimSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeClaimSpecDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimSpec)) *PersistentVolumeClaimSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeClaimSpecDie) DeepCopy() *PersistentVolumeClaimSpecDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeClaimSpecDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.AccessModes = v
	})
}

func (d *PersistentVolumeClaimSpecDie) Selector(v *apismetav1.LabelSelector) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.Selector = v
	})
}

func (d *PersistentVolumeClaimSpecDie) Resources(v corev1.ResourceRequirements) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.Resources = v
	})
}

func (d *PersistentVolumeClaimSpecDie) VolumeName(v string) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.VolumeName = v
	})
}

func (d *PersistentVolumeClaimSpecDie) StorageClassName(v *string) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.StorageClassName = v
	})
}

func (d *PersistentVolumeClaimSpecDie) VolumeMode(v *corev1.PersistentVolumeMode) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.VolumeMode = v
	})
}

func (d *PersistentVolumeClaimSpecDie) DataSource(v *corev1.TypedLocalObjectReference) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.DataSource = v
	})
}

func (d *PersistentVolumeClaimSpecDie) DataSourceRef(v *corev1.TypedLocalObjectReference) *PersistentVolumeClaimSpecDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimSpec) {
		r.DataSourceRef = v
	})
}

type PersistentVolumeClaimStatusDie struct {
	mutable bool
	r       corev1.PersistentVolumeClaimStatus
}

var PersistentVolumeClaimStatusBlank = (&PersistentVolumeClaimStatusDie{}).DieFeed(corev1.PersistentVolumeClaimStatus{})

func (d *PersistentVolumeClaimStatusDie) DieImmutable(immutable bool) *PersistentVolumeClaimStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PersistentVolumeClaimStatusDie) DieFeed(r corev1.PersistentVolumeClaimStatus) *PersistentVolumeClaimStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PersistentVolumeClaimStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeClaimStatusDie) DieRelease() corev1.PersistentVolumeClaimStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PersistentVolumeClaimStatusDie) DieStamp(fn func(r *corev1.PersistentVolumeClaimStatus)) *PersistentVolumeClaimStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PersistentVolumeClaimStatusDie) DeepCopy() *PersistentVolumeClaimStatusDie {
	r := *d.r.DeepCopy()
	return &PersistentVolumeClaimStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PersistentVolumeClaimStatusDie) Phase(v corev1.PersistentVolumeClaimPhase) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Phase = v
	})
}

func (d *PersistentVolumeClaimStatusDie) AccessModes(v ...corev1.PersistentVolumeAccessMode) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.AccessModes = v
	})
}

func (d *PersistentVolumeClaimStatusDie) Capacity(v corev1.ResourceList) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Capacity = v
	})
}

func (d *PersistentVolumeClaimStatusDie) Conditions(v ...corev1.PersistentVolumeClaimCondition) *PersistentVolumeClaimStatusDie {
	return d.DieStamp(func(r *corev1.PersistentVolumeClaimStatus) {
		r.Conditions = v
	})
}

type PodDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Pod
}

var PodBlank = (&PodDie{}).DieFeed(corev1.Pod{})

func (d *PodDie) DieImmutable(immutable bool) *PodDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PodDie) DieFeed(r corev1.Pod) *PodDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &PodDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PodDie) DieRelease() corev1.Pod {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PodDie) DieStamp(fn func(r *corev1.Pod)) *PodDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PodDie) DeepCopy() *PodDie {
	r := *d.r.DeepCopy()
	return &PodDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *PodDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *PodDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *PodDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *PodDie) UnmarshalJSON(b []byte) error {
	if d == PodBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Pod{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *PodDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *PodDie) SpecDie(fn func(d *PodSpecDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := PodSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *PodDie) StatusDie(fn func(d *PodStatusDie)) *PodDie {
	return d.DieStamp(func(r *corev1.Pod) {
		d := PodStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*PodDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*PodDie)(nil)
var _ runtime.Object = (*PodDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Pod"), &PodDie{})
		return nil
	})
}

type PodSpecDie struct {
	mutable bool
	r       corev1.PodSpec
}

var PodSpecBlank = (&PodSpecDie{}).DieFeed(corev1.PodSpec{})

func (d *PodSpecDie) DieImmutable(immutable bool) *PodSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PodSpecDie) DieFeed(r corev1.PodSpec) *PodSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodSpecDie) DieRelease() corev1.PodSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PodSpecDie) DieStamp(fn func(r *corev1.PodSpec)) *PodSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PodSpecDie) DeepCopy() *PodSpecDie {
	r := *d.r.DeepCopy()
	return &PodSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodSpecDie) Volumes(v ...corev1.Volume) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Volumes = v
	})
}

func (d *PodSpecDie) InitContainers(v ...corev1.Container) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.InitContainers = v
	})
}

func (d *PodSpecDie) Containers(v ...corev1.Container) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Containers = v
	})
}

func (d *PodSpecDie) EphemeralContainers(v ...corev1.EphemeralContainer) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.EphemeralContainers = v
	})
}

func (d *PodSpecDie) RestartPolicy(v corev1.RestartPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.RestartPolicy = v
	})
}

func (d *PodSpecDie) TerminationGracePeriodSeconds(v *int64) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.TerminationGracePeriodSeconds = v
	})
}

func (d *PodSpecDie) ActiveDeadlineSeconds(v *int64) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ActiveDeadlineSeconds = v
	})
}

func (d *PodSpecDie) DNSPolicy(v corev1.DNSPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.DNSPolicy = v
	})
}

func (d *PodSpecDie) NodeSelector(v map[string]string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.NodeSelector = v
	})
}

func (d *PodSpecDie) ServiceAccountName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ServiceAccountName = v
	})
}

func (d *PodSpecDie) AutomountServiceAccountToken(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.AutomountServiceAccountToken = v
	})
}

func (d *PodSpecDie) NodeName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.NodeName = v
	})
}

func (d *PodSpecDie) HostNetwork(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostNetwork = v
	})
}

func (d *PodSpecDie) HostPID(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostPID = v
	})
}

func (d *PodSpecDie) HostIPC(v bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostIPC = v
	})
}

func (d *PodSpecDie) ShareProcessNamespace(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ShareProcessNamespace = v
	})
}

func (d *PodSpecDie) SecurityContext(v *corev1.PodSecurityContext) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SecurityContext = v
	})
}

func (d *PodSpecDie) ImagePullSecrets(v ...corev1.LocalObjectReference) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ImagePullSecrets = v
	})
}

func (d *PodSpecDie) Hostname(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Hostname = v
	})
}

func (d *PodSpecDie) Subdomain(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Subdomain = v
	})
}

func (d *PodSpecDie) Affinity(v *corev1.Affinity) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Affinity = v
	})
}

func (d *PodSpecDie) SchedulerName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SchedulerName = v
	})
}

func (d *PodSpecDie) Tolerations(v ...corev1.Toleration) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Tolerations = v
	})
}

func (d *PodSpecDie) HostAliases(v ...corev1.HostAlias) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.HostAliases = v
	})
}

func (d *PodSpecDie) PriorityClassName(v string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.PriorityClassName = v
	})
}

func (d *PodSpecDie) Priority(v *int32) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Priority = v
	})
}

func (d *PodSpecDie) DNSConfig(v *corev1.PodDNSConfig) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.DNSConfig = v
	})
}

func (d *PodSpecDie) ReadinessGates(v ...corev1.PodReadinessGate) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.ReadinessGates = v
	})
}

func (d *PodSpecDie) RuntimeClassName(v *string) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.RuntimeClassName = v
	})
}

func (d *PodSpecDie) EnableServiceLinks(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.EnableServiceLinks = v
	})
}

func (d *PodSpecDie) PreemptionPolicy(v *corev1.PreemptionPolicy) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.PreemptionPolicy = v
	})
}

func (d *PodSpecDie) Overhead(v corev1.ResourceList) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.Overhead = v
	})
}

func (d *PodSpecDie) TopologySpreadConstraints(v ...corev1.TopologySpreadConstraint) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.TopologySpreadConstraints = v
	})
}

func (d *PodSpecDie) SetHostnameAsFQDN(v *bool) *PodSpecDie {
	return d.DieStamp(func(r *corev1.PodSpec) {
		r.SetHostnameAsFQDN = v
	})
}

type PodStatusDie struct {
	mutable bool
	r       corev1.PodStatus
}

var PodStatusBlank = (&PodStatusDie{}).DieFeed(corev1.PodStatus{})

func (d *PodStatusDie) DieImmutable(immutable bool) *PodStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PodStatusDie) DieFeed(r corev1.PodStatus) *PodStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodStatusDie) DieRelease() corev1.PodStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PodStatusDie) DieStamp(fn func(r *corev1.PodStatus)) *PodStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PodStatusDie) DeepCopy() *PodStatusDie {
	r := *d.r.DeepCopy()
	return &PodStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodStatusDie) Phase(v corev1.PodPhase) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Phase = v
	})
}

func (d *PodStatusDie) Conditions(v ...corev1.PodCondition) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Conditions = v
	})
}

func (d *PodStatusDie) Message(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Message = v
	})
}

func (d *PodStatusDie) Reason(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.Reason = v
	})
}

func (d *PodStatusDie) NominatedNodeName(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.NominatedNodeName = v
	})
}

func (d *PodStatusDie) HostIP(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.HostIP = v
	})
}

func (d *PodStatusDie) PodIP(v string) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.PodIP = v
	})
}

func (d *PodStatusDie) PodIPs(v ...corev1.PodIP) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.PodIPs = v
	})
}

func (d *PodStatusDie) StartTime(v *apismetav1.Time) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.StartTime = v
	})
}

func (d *PodStatusDie) InitContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.InitContainerStatuses = v
	})
}

func (d *PodStatusDie) ContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.ContainerStatuses = v
	})
}

func (d *PodStatusDie) QOSClass(v corev1.PodQOSClass) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.QOSClass = v
	})
}

func (d *PodStatusDie) EphemeralContainerStatuses(v ...corev1.ContainerStatus) *PodStatusDie {
	return d.DieStamp(func(r *corev1.PodStatus) {
		r.EphemeralContainerStatuses = v
	})
}

type PodTemplateSpecDie struct {
	mutable bool
	r       corev1.PodTemplateSpec
}

var PodTemplateSpecBlank = (&PodTemplateSpecDie{}).DieFeed(corev1.PodTemplateSpec{})

func (d *PodTemplateSpecDie) DieImmutable(immutable bool) *PodTemplateSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *PodTemplateSpecDie) DieFeed(r corev1.PodTemplateSpec) *PodTemplateSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &PodTemplateSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodTemplateSpecDie) DieRelease() corev1.PodTemplateSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *PodTemplateSpecDie) DieStamp(fn func(r *corev1.PodTemplateSpec)) *PodTemplateSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *PodTemplateSpecDie) DeepCopy() *PodTemplateSpecDie {
	r := *d.r.DeepCopy()
	return &PodTemplateSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *PodTemplateSpecDie) Spec(v corev1.PodSpec) *PodTemplateSpecDie {
	return d.DieStamp(func(r *corev1.PodTemplateSpec) {
		r.Spec = v
	})
}

type ResourceQuotaDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ResourceQuota
}

var ResourceQuotaBlank = (&ResourceQuotaDie{}).DieFeed(corev1.ResourceQuota{})

func (d *ResourceQuotaDie) DieImmutable(immutable bool) *ResourceQuotaDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ResourceQuotaDie) DieFeed(r corev1.ResourceQuota) *ResourceQuotaDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ResourceQuotaDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ResourceQuotaDie) DieRelease() corev1.ResourceQuota {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ResourceQuotaDie) DieStamp(fn func(r *corev1.ResourceQuota)) *ResourceQuotaDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ResourceQuotaDie) DeepCopy() *ResourceQuotaDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ResourceQuotaDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *ResourceQuotaDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ResourceQuotaDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ResourceQuotaDie) UnmarshalJSON(b []byte) error {
	if d == ResourceQuotaBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.ResourceQuota{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *ResourceQuotaDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *ResourceQuotaDie) SpecDie(fn func(d *ResourceQuotaSpecDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := ResourceQuotaSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *ResourceQuotaDie) StatusDie(fn func(d *ResourceQuotaStatusDie)) *ResourceQuotaDie {
	return d.DieStamp(func(r *corev1.ResourceQuota) {
		d := ResourceQuotaStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*ResourceQuotaDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*ResourceQuotaDie)(nil)
var _ runtime.Object = (*ResourceQuotaDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("ResourceQuota"), &ResourceQuotaDie{})
		return nil
	})
}

type ResourceQuotaSpecDie struct {
	mutable bool
	r       corev1.ResourceQuotaSpec
}

var ResourceQuotaSpecBlank = (&ResourceQuotaSpecDie{}).DieFeed(corev1.ResourceQuotaSpec{})

func (d *ResourceQuotaSpecDie) DieImmutable(immutable bool) *ResourceQuotaSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ResourceQuotaSpecDie) DieFeed(r corev1.ResourceQuotaSpec) *ResourceQuotaSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceQuotaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ResourceQuotaSpecDie) DieRelease() corev1.ResourceQuotaSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ResourceQuotaSpecDie) DieStamp(fn func(r *corev1.ResourceQuotaSpec)) *ResourceQuotaSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ResourceQuotaSpecDie) DeepCopy() *ResourceQuotaSpecDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ResourceQuotaSpecDie) Hard(v corev1.ResourceList) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.Hard = v
	})
}

func (d *ResourceQuotaSpecDie) Scopes(v ...corev1.ResourceQuotaScope) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.Scopes = v
	})
}

func (d *ResourceQuotaSpecDie) ScopeSelector(v *corev1.ScopeSelector) *ResourceQuotaSpecDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaSpec) {
		r.ScopeSelector = v
	})
}

type ResourceQuotaStatusDie struct {
	mutable bool
	r       corev1.ResourceQuotaStatus
}

var ResourceQuotaStatusBlank = (&ResourceQuotaStatusDie{}).DieFeed(corev1.ResourceQuotaStatus{})

func (d *ResourceQuotaStatusDie) DieImmutable(immutable bool) *ResourceQuotaStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ResourceQuotaStatusDie) DieFeed(r corev1.ResourceQuotaStatus) *ResourceQuotaStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ResourceQuotaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ResourceQuotaStatusDie) DieRelease() corev1.ResourceQuotaStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ResourceQuotaStatusDie) DieStamp(fn func(r *corev1.ResourceQuotaStatus)) *ResourceQuotaStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ResourceQuotaStatusDie) DeepCopy() *ResourceQuotaStatusDie {
	r := *d.r.DeepCopy()
	return &ResourceQuotaStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ResourceQuotaStatusDie) Hard(v corev1.ResourceList) *ResourceQuotaStatusDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaStatus) {
		r.Hard = v
	})
}

func (d *ResourceQuotaStatusDie) Used(v corev1.ResourceList) *ResourceQuotaStatusDie {
	return d.DieStamp(func(r *corev1.ResourceQuotaStatus) {
		r.Used = v
	})
}

type SecretDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Secret
}

var SecretBlank = (&SecretDie{}).DieFeed(corev1.Secret{})

func (d *SecretDie) DieImmutable(immutable bool) *SecretDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *SecretDie) DieFeed(r corev1.Secret) *SecretDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &SecretDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *SecretDie) DieRelease() corev1.Secret {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *SecretDie) DieStamp(fn func(r *corev1.Secret)) *SecretDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *SecretDie) DeepCopy() *SecretDie {
	r := *d.r.DeepCopy()
	return &SecretDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *SecretDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *SecretDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *SecretDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *SecretDie) UnmarshalJSON(b []byte) error {
	if d == SecretBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Secret{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *SecretDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

var _ apismetav1.Object = (*SecretDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*SecretDie)(nil)
var _ runtime.Object = (*SecretDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Secret"), &SecretDie{})
		return nil
	})
}

func (d *SecretDie) Data(v map[string][]byte) *SecretDie {
	return d.DieStamp(func(r *corev1.Secret) {
		r.Data = v
	})
}

type ServiceDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.Service
}

var ServiceBlank = (&ServiceDie{}).DieFeed(corev1.Service{})

func (d *ServiceDie) DieImmutable(immutable bool) *ServiceDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ServiceDie) DieFeed(r corev1.Service) *ServiceDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ServiceDie) DieRelease() corev1.Service {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ServiceDie) DieStamp(fn func(r *corev1.Service)) *ServiceDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ServiceDie) DeepCopy() *ServiceDie {
	r := *d.r.DeepCopy()
	return &ServiceDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ServiceDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *ServiceDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceDie) UnmarshalJSON(b []byte) error {
	if d == ServiceBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.Service{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *ServiceDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *ServiceDie) SpecDie(fn func(d *ServiceSpecDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := ServiceSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *ServiceDie) StatusDie(fn func(d *ServiceStatusDie)) *ServiceDie {
	return d.DieStamp(func(r *corev1.Service) {
		d := ServiceStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*ServiceDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*ServiceDie)(nil)
var _ runtime.Object = (*ServiceDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("Service"), &ServiceDie{})
		return nil
	})
}

type ServiceSpecDie struct {
	mutable bool
	r       corev1.ServiceSpec
}

var ServiceSpecBlank = (&ServiceSpecDie{}).DieFeed(corev1.ServiceSpec{})

func (d *ServiceSpecDie) DieImmutable(immutable bool) *ServiceSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ServiceSpecDie) DieFeed(r corev1.ServiceSpec) *ServiceSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ServiceSpecDie) DieRelease() corev1.ServiceSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ServiceSpecDie) DieStamp(fn func(r *corev1.ServiceSpec)) *ServiceSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ServiceSpecDie) DeepCopy() *ServiceSpecDie {
	r := *d.r.DeepCopy()
	return &ServiceSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ServiceSpecDie) Ports(v ...corev1.ServicePort) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Ports = v
	})
}

func (d *ServiceSpecDie) Selector(v map[string]string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Selector = v
	})
}

func (d *ServiceSpecDie) ClusterIP(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ClusterIP = v
	})
}

func (d *ServiceSpecDie) ClusterIPs(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ClusterIPs = v
	})
}

func (d *ServiceSpecDie) Type(v corev1.ServiceType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.Type = v
	})
}

func (d *ServiceSpecDie) ExternalIPs(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalIPs = v
	})
}

func (d *ServiceSpecDie) SessionAffinity(v corev1.ServiceAffinity) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.SessionAffinity = v
	})
}

func (d *ServiceSpecDie) LoadBalancerIP(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerIP = v
	})
}

func (d *ServiceSpecDie) LoadBalancerSourceRanges(v ...string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerSourceRanges = v
	})
}

func (d *ServiceSpecDie) ExternalName(v string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalName = v
	})
}

func (d *ServiceSpecDie) ExternalTrafficPolicy(v corev1.ServiceExternalTrafficPolicyType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.ExternalTrafficPolicy = v
	})
}

func (d *ServiceSpecDie) HealthCheckNodePort(v int32) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.HealthCheckNodePort = v
	})
}

func (d *ServiceSpecDie) PublishNotReadyAddresses(v bool) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.PublishNotReadyAddresses = v
	})
}

func (d *ServiceSpecDie) SessionAffinityConfig(v *corev1.SessionAffinityConfig) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.SessionAffinityConfig = v
	})
}

func (d *ServiceSpecDie) IPFamilies(v ...corev1.IPFamily) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.IPFamilies = v
	})
}

func (d *ServiceSpecDie) IPFamilyPolicy(v *corev1.IPFamilyPolicyType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.IPFamilyPolicy = v
	})
}

func (d *ServiceSpecDie) AllocateLoadBalancerNodePorts(v *bool) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.AllocateLoadBalancerNodePorts = v
	})
}

func (d *ServiceSpecDie) LoadBalancerClass(v *string) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.LoadBalancerClass = v
	})
}

func (d *ServiceSpecDie) InternalTrafficPolicy(v *corev1.ServiceInternalTrafficPolicyType) *ServiceSpecDie {
	return d.DieStamp(func(r *corev1.ServiceSpec) {
		r.InternalTrafficPolicy = v
	})
}

type ServiceStatusDie struct {
	mutable bool
	r       corev1.ServiceStatus
}

var ServiceStatusBlank = (&ServiceStatusDie{}).DieFeed(corev1.ServiceStatus{})

func (d *ServiceStatusDie) DieImmutable(immutable bool) *ServiceStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ServiceStatusDie) DieFeed(r corev1.ServiceStatus) *ServiceStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &ServiceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ServiceStatusDie) DieRelease() corev1.ServiceStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ServiceStatusDie) DieStamp(fn func(r *corev1.ServiceStatus)) *ServiceStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ServiceStatusDie) DeepCopy() *ServiceStatusDie {
	r := *d.r.DeepCopy()
	return &ServiceStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *ServiceStatusDie) LoadBalancer(v corev1.LoadBalancerStatus) *ServiceStatusDie {
	return d.DieStamp(func(r *corev1.ServiceStatus) {
		r.LoadBalancer = v
	})
}

func (d *ServiceStatusDie) Conditions(v ...apismetav1.Condition) *ServiceStatusDie {
	return d.DieStamp(func(r *corev1.ServiceStatus) {
		r.Conditions = v
	})
}

type ServiceAccountDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       corev1.ServiceAccount
}

var ServiceAccountBlank = (&ServiceAccountDie{}).DieFeed(corev1.ServiceAccount{})

func (d *ServiceAccountDie) DieImmutable(immutable bool) *ServiceAccountDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *ServiceAccountDie) DieFeed(r corev1.ServiceAccount) *ServiceAccountDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &ServiceAccountDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ServiceAccountDie) DieRelease() corev1.ServiceAccount {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *ServiceAccountDie) DieStamp(fn func(r *corev1.ServiceAccount)) *ServiceAccountDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *ServiceAccountDie) DeepCopy() *ServiceAccountDie {
	r := *d.r.DeepCopy()
	return &ServiceAccountDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *ServiceAccountDie) DeepCopyObject() runtime.Object {
	return d.DeepCopy()
}

func (d *ServiceAccountDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *ServiceAccountDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *ServiceAccountDie) UnmarshalJSON(b []byte) error {
	if d == ServiceAccountBlank {
		return fmtx.Errorf("cannot unmarshing into the root object, create a copy first")
	}
	r := &corev1.ServiceAccount{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *ServiceAccountDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

var _ apismetav1.Object = (*ServiceAccountDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*ServiceAccountDie)(nil)
var _ runtime.Object = (*ServiceAccountDie)(nil)

func init() {
	SchemeBuilder.Register(func(s *runtime.Scheme) error {
		s.AddKnownTypeWithName(GroupVersion.WithKind("ServiceAccount"), &ServiceAccountDie{})
		return nil
	})
}

func (d *ServiceAccountDie) Secrets(v ...corev1.ObjectReference) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.Secrets = v
	})
}

func (d *ServiceAccountDie) ImagePullSecrets(v ...corev1.LocalObjectReference) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.ImagePullSecrets = v
	})
}

func (d *ServiceAccountDie) AutomountServiceAccountToken(v *bool) *ServiceAccountDie {
	return d.DieStamp(func(r *corev1.ServiceAccount) {
		r.AutomountServiceAccountToken = v
	})
}
