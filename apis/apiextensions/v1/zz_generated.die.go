//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	json "encoding/json"
	fmtx "fmt"
	metav1 "github.com/scothis/dies/apis/meta/v1"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomResourceDefinitionDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       apiextensionsv1.CustomResourceDefinition
}

var CustomResourceDefinitionBlank = (&CustomResourceDefinitionDie{}).DieFeed(apiextensionsv1.CustomResourceDefinition{})

func (d *CustomResourceDefinitionDie) DieImmutable(immutable bool) *CustomResourceDefinitionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *CustomResourceDefinitionDie) DieFeed(r apiextensionsv1.CustomResourceDefinition) *CustomResourceDefinitionDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &CustomResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *CustomResourceDefinitionDie) DieRelease() apiextensionsv1.CustomResourceDefinition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *CustomResourceDefinitionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinition)) *CustomResourceDefinitionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *CustomResourceDefinitionDie) DeepCopy() *CustomResourceDefinitionDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *CustomResourceDefinitionDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *CustomResourceDefinitionDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *CustomResourceDefinitionDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *CustomResourceDefinitionDie) UnmarshalJSON(b []byte) error {
	if d == CustomResourceDefinitionBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &apiextensionsv1.CustomResourceDefinition{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r)
	return err
}

func (d *CustomResourceDefinitionDie) MetadataDie(fn func(d *metav1.ObjectMetaDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *CustomResourceDefinitionDie) SpecDie(fn func(d *CustomResourceDefinitionSpecDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *CustomResourceDefinitionDie) StatusDie(fn func(d *CustomResourceDefinitionStatusDie)) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

var _ apismetav1.Object = (*CustomResourceDefinitionDie)(nil)
var _ apismetav1.ObjectMetaAccessor = (*CustomResourceDefinitionDie)(nil)
var _ runtime.Object = (*CustomResourceDefinitionDie)(nil)

// spec describes how the user wants the resources to appear
func (d *CustomResourceDefinitionDie) Spec(v apiextensionsv1.CustomResourceDefinitionSpec) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Spec = v
	})
}

// status indicates the actual state of the CustomResourceDefinition
func (d *CustomResourceDefinitionDie) Status(v apiextensionsv1.CustomResourceDefinitionStatus) *CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Status = v
	})
}

type CustomResourceDefinitionStatusDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionStatus
}

var CustomResourceDefinitionStatusBlank = (&CustomResourceDefinitionStatusDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionStatus{})

func (d *CustomResourceDefinitionStatusDie) DieImmutable(immutable bool) *CustomResourceDefinitionStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *CustomResourceDefinitionStatusDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionStatus) *CustomResourceDefinitionStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *CustomResourceDefinitionStatusDie) DieRelease() apiextensionsv1.CustomResourceDefinitionStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *CustomResourceDefinitionStatusDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionStatus)) *CustomResourceDefinitionStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *CustomResourceDefinitionStatusDie) DeepCopy() *CustomResourceDefinitionStatusDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

// conditions indicate state for particular aspects of a CustomResourceDefinition
func (d *CustomResourceDefinitionStatusDie) Conditions(v ...apiextensionsv1.CustomResourceDefinitionCondition) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.Conditions = v
	})
}

// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
func (d *CustomResourceDefinitionStatusDie) AcceptedNames(v apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.AcceptedNames = v
	})
}

// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
func (d *CustomResourceDefinitionStatusDie) StoredVersions(v ...string) *CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.StoredVersions = v
	})
}

type CustomResourceDefinitionSpecDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionSpec
}

var CustomResourceDefinitionSpecBlank = (&CustomResourceDefinitionSpecDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionSpec{})

func (d *CustomResourceDefinitionSpecDie) DieImmutable(immutable bool) *CustomResourceDefinitionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy()
	d.mutable = !immutable
	return d
}

func (d *CustomResourceDefinitionSpecDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionSpec) *CustomResourceDefinitionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &CustomResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *CustomResourceDefinitionSpecDie) DieRelease() apiextensionsv1.CustomResourceDefinitionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *CustomResourceDefinitionSpecDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionSpec)) *CustomResourceDefinitionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *CustomResourceDefinitionSpecDie) DeepCopy() *CustomResourceDefinitionSpecDie {
	r := *d.r.DeepCopy()
	return &CustomResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
func (d *CustomResourceDefinitionSpecDie) Group(v string) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Group = v
	})
}

// names specify the resource and kind names for the custom resource.
func (d *CustomResourceDefinitionSpecDie) Names(v apiextensionsv1.CustomResourceDefinitionNames) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Names = v
	})
}

// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
func (d *CustomResourceDefinitionSpecDie) Scope(v apiextensionsv1.ResourceScope) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Scope = v
	})
}

// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
func (d *CustomResourceDefinitionSpecDie) Versions(v ...apiextensionsv1.CustomResourceDefinitionVersion) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Versions = v
	})
}

// conversion defines conversion settings for the CRD.
func (d *CustomResourceDefinitionSpecDie) Conversion(v *apiextensionsv1.CustomResourceConversion) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Conversion = v
	})
}

// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
func (d *CustomResourceDefinitionSpecDie) PreserveUnknownFields(v bool) *CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.PreserveUnknownFields = v
	})
}
