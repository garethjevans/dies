//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright 2021 the original author or authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by diegen. DO NOT EDIT.

package v1

import (
	metav1 "dies.dev/apis/meta/v1"
	json "encoding/json"
	fmtx "fmt"
	apiextensionsv1 "k8s.io/apiextensions-apiserver/pkg/apis/apiextensions/v1"
	apismetav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
)

type CustomResourceDefinitionDie interface {
	// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
	DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinition)) CustomResourceDefinitionDie
	// DieFeed returns a new die with the provided resource.
	DieFeed(r apiextensionsv1.CustomResourceDefinition) CustomResourceDefinitionDie
	// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
	DieFeedPtr(r *apiextensionsv1.CustomResourceDefinition) CustomResourceDefinitionDie
	// DieRelease returns the resource managed by the die.
	DieRelease() apiextensionsv1.CustomResourceDefinition
	// DieReleasePtr returns a pointer to the resource managed by the die.
	DieReleasePtr() *apiextensionsv1.CustomResourceDefinition
	// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
	DieImmutable(immutable bool) CustomResourceDefinitionDie
	// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
	DeepCopy() CustomResourceDefinitionDie

	// MetadataDie stamps the resource's ObjectMeta field with a mutable die.
	MetadataDie(fn func(d metav1.ObjectMetaDie)) CustomResourceDefinitionDie
	// SpecDie stamps the resource's spec field with a mutable die.
	SpecDie(fn func(d CustomResourceDefinitionSpecDie)) CustomResourceDefinitionDie
	// StatusDie stamps the resource's status field with a mutable die.
	StatusDie(fn func(d CustomResourceDefinitionStatusDie)) CustomResourceDefinitionDie
	// spec describes how the user wants the resources to appear
	Spec(Spec apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionDie
	// status indicates the actual state of the CustomResourceDefinition
	Status(Status apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionDie

	runtime.Object
	apismetav1.Object
	apismetav1.ObjectMetaAccessor
}

var _ CustomResourceDefinitionDie = (*customResourceDefinitionDie)(nil)
var CustomResourceDefinitionBlank = (&customResourceDefinitionDie{}).DieFeed(apiextensionsv1.CustomResourceDefinition{})

type customResourceDefinitionDie struct {
	metav1.FrozenObjectMeta
	mutable bool
	r       apiextensionsv1.CustomResourceDefinition
}

func (d *customResourceDefinitionDie) DieImmutable(immutable bool) CustomResourceDefinitionDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy().(*customResourceDefinitionDie)
	d.mutable = !immutable
	return d
}

func (d *customResourceDefinitionDie) DieFeed(r apiextensionsv1.CustomResourceDefinition) CustomResourceDefinitionDie {
	if d.mutable {
		d.FrozenObjectMeta = metav1.FreezeObjectMeta(r.ObjectMeta)
		d.r = r
		return d
	}
	return &customResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *customResourceDefinitionDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinition) CustomResourceDefinitionDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinition{}
	}
	return d.DieFeed(*r)
}

func (d *customResourceDefinitionDie) DieRelease() apiextensionsv1.CustomResourceDefinition {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *customResourceDefinitionDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinition {
	r := d.DieRelease()
	return &r
}

func (d *customResourceDefinitionDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinition)) CustomResourceDefinitionDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *customResourceDefinitionDie) DeepCopy() CustomResourceDefinitionDie {
	r := *d.r.DeepCopy()
	return &customResourceDefinitionDie{
		FrozenObjectMeta: metav1.FreezeObjectMeta(r.ObjectMeta),
		mutable:          d.mutable,
		r:                r,
	}
}

func (d *customResourceDefinitionDie) DeepCopyObject() runtime.Object {
	return d.r.DeepCopy()
}

func (d *customResourceDefinitionDie) GetObjectKind() schema.ObjectKind {
	r := d.DieRelease()
	return r.GetObjectKind()
}

func (d *customResourceDefinitionDie) MarshalJSON() ([]byte, error) {
	return json.Marshal(d.r)
}

func (d *customResourceDefinitionDie) UnmarshalJSON(b []byte) error {
	if d == CustomResourceDefinitionBlank {
		return fmtx.Errorf("cannot unmarshal into the root object, create a copy first")
	}
	r := &apiextensionsv1.CustomResourceDefinition{}
	err := json.Unmarshal(b, r)
	*d = *d.DieFeed(*r).(*customResourceDefinitionDie)
	return err
}

func (d *customResourceDefinitionDie) MetadataDie(fn func(d metav1.ObjectMetaDie)) CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := metav1.ObjectMetaBlank.DieImmutable(false).DieFeed(r.ObjectMeta)
		fn(d)
		r.ObjectMeta = d.DieRelease()
	})
}

func (d *customResourceDefinitionDie) SpecDie(fn func(d CustomResourceDefinitionSpecDie)) CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionSpecBlank.DieImmutable(false).DieFeed(r.Spec)
		fn(d)
		r.Spec = d.DieRelease()
	})
}

func (d *customResourceDefinitionDie) StatusDie(fn func(d CustomResourceDefinitionStatusDie)) CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		d := CustomResourceDefinitionStatusBlank.DieImmutable(false).DieFeed(r.Status)
		fn(d)
		r.Status = d.DieRelease()
	})
}

func (d *customResourceDefinitionDie) Spec(v apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Spec = v
	})
}

func (d *customResourceDefinitionDie) Status(v apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinition) {
		r.Status = v
	})
}

type CustomResourceDefinitionSpecDie interface {
	// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
	DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionSpec)) CustomResourceDefinitionSpecDie
	// DieFeed returns a new die with the provided resource.
	DieFeed(r apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionSpecDie
	// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
	DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionSpecDie
	// DieRelease returns the resource managed by the die.
	DieRelease() apiextensionsv1.CustomResourceDefinitionSpec
	// DieReleasePtr returns a pointer to the resource managed by the die.
	DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionSpec
	// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
	DieImmutable(immutable bool) CustomResourceDefinitionSpecDie
	// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
	DeepCopy() CustomResourceDefinitionSpecDie

	// group is the API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`).
	Group(Group string) CustomResourceDefinitionSpecDie
	// names specify the resource and kind names for the custom resource.
	Names(Names apiextensionsv1.CustomResourceDefinitionNames) CustomResourceDefinitionSpecDie
	// scope indicates whether the defined custom resource is cluster- or namespace-scoped. Allowed values are `Cluster` and `Namespaced`.
	Scope(Scope apiextensionsv1.ResourceScope) CustomResourceDefinitionSpecDie
	// versions is the list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is "kube-like", it will sort above non "kube-like" version strings, which are ordered lexicographically. "Kube-like" versions start with a "v", then are followed by a number (the major version), then optionally the string "alpha" or "beta" and another number (the minor version). These are sorted first by GA > beta > alpha (where GA is a version with no suffix such as beta or alpha), and then by comparing major version, then minor version. An example sorted list of versions: v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10.
	Versions(Versions ...apiextensionsv1.CustomResourceDefinitionVersion) CustomResourceDefinitionSpecDie
	// conversion defines conversion settings for the CRD.
	Conversion(Conversion *apiextensionsv1.CustomResourceConversion) CustomResourceDefinitionSpecDie
	// preserveUnknownFields indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. apiVersion, kind, metadata and known fields inside metadata are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`. See https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/#pruning-versus-preserving-unknown-fields for details.
	PreserveUnknownFields(PreserveUnknownFields bool) CustomResourceDefinitionSpecDie
}

var _ CustomResourceDefinitionSpecDie = (*customResourceDefinitionSpecDie)(nil)
var CustomResourceDefinitionSpecBlank = (&customResourceDefinitionSpecDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionSpec{})

type customResourceDefinitionSpecDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionSpec
}

func (d *customResourceDefinitionSpecDie) DieImmutable(immutable bool) CustomResourceDefinitionSpecDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy().(*customResourceDefinitionSpecDie)
	d.mutable = !immutable
	return d
}

func (d *customResourceDefinitionSpecDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionSpecDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &customResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *customResourceDefinitionSpecDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionSpec) CustomResourceDefinitionSpecDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionSpec{}
	}
	return d.DieFeed(*r)
}

func (d *customResourceDefinitionSpecDie) DieRelease() apiextensionsv1.CustomResourceDefinitionSpec {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *customResourceDefinitionSpecDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionSpec {
	r := d.DieRelease()
	return &r
}

func (d *customResourceDefinitionSpecDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionSpec)) CustomResourceDefinitionSpecDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *customResourceDefinitionSpecDie) DeepCopy() CustomResourceDefinitionSpecDie {
	r := *d.r.DeepCopy()
	return &customResourceDefinitionSpecDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *customResourceDefinitionSpecDie) Group(v string) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Group = v
	})
}

func (d *customResourceDefinitionSpecDie) Names(v apiextensionsv1.CustomResourceDefinitionNames) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Names = v
	})
}

func (d *customResourceDefinitionSpecDie) Scope(v apiextensionsv1.ResourceScope) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Scope = v
	})
}

func (d *customResourceDefinitionSpecDie) Versions(v ...apiextensionsv1.CustomResourceDefinitionVersion) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Versions = v
	})
}

func (d *customResourceDefinitionSpecDie) Conversion(v *apiextensionsv1.CustomResourceConversion) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.Conversion = v
	})
}

func (d *customResourceDefinitionSpecDie) PreserveUnknownFields(v bool) CustomResourceDefinitionSpecDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionSpec) {
		r.PreserveUnknownFields = v
	})
}

type CustomResourceDefinitionStatusDie interface {
	// DieStamp returns a new die with the resource passed to the callback function. The resource is mutable.
	DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionStatus)) CustomResourceDefinitionStatusDie
	// DieFeed returns a new die with the provided resource.
	DieFeed(r apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionStatusDie
	// DieFeedPtr returns a new die with the provided resource pointer. If the resource is nil, the empty value is used instead.
	DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionStatusDie
	// DieRelease returns the resource managed by the die.
	DieRelease() apiextensionsv1.CustomResourceDefinitionStatus
	// DieReleasePtr returns a pointer to the resource managed by the die.
	DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionStatus
	// DieImmutable returns a new die for the current die's state that is either mutable (`false`) or immutable (`true`).
	DieImmutable(immutable bool) CustomResourceDefinitionStatusDie
	// DeepCopy returns a new die with equivalent state. Useful for snapshotting a mutable die.
	DeepCopy() CustomResourceDefinitionStatusDie

	customResourceDefinitionStatus
	// conditions indicate state for particular aspects of a CustomResourceDefinition
	Conditions(Conditions ...apiextensionsv1.CustomResourceDefinitionCondition) CustomResourceDefinitionStatusDie
	// acceptedNames are the names that are actually being used to serve discovery. They may be different than the names in spec.
	AcceptedNames(AcceptedNames apiextensionsv1.CustomResourceDefinitionNames) CustomResourceDefinitionStatusDie
	// storedVersions lists all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.
	StoredVersions(StoredVersions ...string) CustomResourceDefinitionStatusDie
}

var _ CustomResourceDefinitionStatusDie = (*customResourceDefinitionStatusDie)(nil)
var CustomResourceDefinitionStatusBlank = (&customResourceDefinitionStatusDie{}).DieFeed(apiextensionsv1.CustomResourceDefinitionStatus{})

type customResourceDefinitionStatusDie struct {
	mutable bool
	r       apiextensionsv1.CustomResourceDefinitionStatus
}

func (d *customResourceDefinitionStatusDie) DieImmutable(immutable bool) CustomResourceDefinitionStatusDie {
	if d.mutable == !immutable {
		return d
	}
	d = d.DeepCopy().(*customResourceDefinitionStatusDie)
	d.mutable = !immutable
	return d
}

func (d *customResourceDefinitionStatusDie) DieFeed(r apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionStatusDie {
	if d.mutable {
		d.r = r
		return d
	}
	return &customResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *customResourceDefinitionStatusDie) DieFeedPtr(r *apiextensionsv1.CustomResourceDefinitionStatus) CustomResourceDefinitionStatusDie {
	if r == nil {
		r = &apiextensionsv1.CustomResourceDefinitionStatus{}
	}
	return d.DieFeed(*r)
}

func (d *customResourceDefinitionStatusDie) DieRelease() apiextensionsv1.CustomResourceDefinitionStatus {
	if d.mutable {
		return d.r
	}
	return *d.r.DeepCopy()
}

func (d *customResourceDefinitionStatusDie) DieReleasePtr() *apiextensionsv1.CustomResourceDefinitionStatus {
	r := d.DieRelease()
	return &r
}

func (d *customResourceDefinitionStatusDie) DieStamp(fn func(r *apiextensionsv1.CustomResourceDefinitionStatus)) CustomResourceDefinitionStatusDie {
	r := d.DieRelease()
	fn(&r)
	return d.DieFeed(r)
}

func (d *customResourceDefinitionStatusDie) DeepCopy() CustomResourceDefinitionStatusDie {
	r := *d.r.DeepCopy()
	return &customResourceDefinitionStatusDie{
		mutable: d.mutable,
		r:       r,
	}
}

func (d *customResourceDefinitionStatusDie) Conditions(v ...apiextensionsv1.CustomResourceDefinitionCondition) CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.Conditions = v
	})
}

func (d *customResourceDefinitionStatusDie) AcceptedNames(v apiextensionsv1.CustomResourceDefinitionNames) CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.AcceptedNames = v
	})
}

func (d *customResourceDefinitionStatusDie) StoredVersions(v ...string) CustomResourceDefinitionStatusDie {
	return d.DieStamp(func(r *apiextensionsv1.CustomResourceDefinitionStatus) {
		r.StoredVersions = v
	})
}
